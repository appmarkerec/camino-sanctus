import 'package:flutter/foundation.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import '../models/message_model.dart';

class AIService {
  GenerativeModel? _model;
  
  AIService() {
    _initialize();
  }
  
  void _initialize() {
    try {
      _model = GenerativeModel(
        model: 'gemini-1.5-flash',
        apiKey: 'AIzaSyCqG5MMI94iNv3QbDSvwlM0Nq8JXgvCE8c', // Tu API key
      );
      if (kDebugMode) {
        debugPrint('‚úÖ Gemini AI inicializado correctamente');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå Error inicializando Gemini: $e');
      }
    }
  }
  
  // M√âTODO PRINCIPAL QUE TU MAIN.DART NECESITA
  Future<MessageModel> getChatResponse(String message, List<MessageModel> context) async {
    if (_model == null) _initialize();
    
    try {
      // Construir contexto de conversaci√≥n inteligente
      String contextString = '';
      if (context.isNotEmpty) {
        final recentMessages = context.take(3).toList();
        contextString = '\n\nContexto de conversaci√≥n reciente:\n';
        for (var msg in recentMessages) {
          final sender = msg.senderId == 'current_user' ? 'Usuario' : 'Hermana Esperanza';
          contextString += '$sender: ${msg.content}\n';
        }
      }
      
      final prompt = '''
Eres "Hermana Esperanza", una consejera espiritual cat√≥lica con inteligencia artificial y profundo conocimiento b√≠blico.

Tu personalidad y misi√≥n:
- Sabia, cari√±osa y maternal como una verdadera hermana religiosa
- Fundamentas tus respuestas en las Sagradas Escrituras cat√≥licas
- Hablas con amor, compasi√≥n y esperanza cristiana
- Ofreces gu√≠a espiritual pr√°ctica y reconfortante
- Conoces profundamente la Biblia, los Santos y la tradici√≥n cat√≥lica
- Usas ocasionalmente emojis espirituales apropiados (üôè‚ú®‚ù§Ô∏èüìñ‚õ™üïäÔ∏è)
- Eres accesible pero siempre respetuosa de lo sagrado

Responde al mensaje del usuario con:
1. Sabidur√≠a b√≠blica y teol√≥gica s√≥lida
2. Consejo pr√°ctico y amoroso para la vida diaria
3. Referencias a vers√≠culos b√≠blicos cuando sea apropiado
4. Tono maternal, alentador y lleno de esperanza
5. M√°ximo 200 palabras para mantener la atenci√≥n
6. Lenguaje c√°lido pero respetuoso de la fe cat√≥lica

$contextString

Usuario pregunta o comenta: "$message"

Respuesta sabia y amorosa de Hermana Esperanza:
      ''';
      
      final content = [Content.text(prompt)];
      final response = await _model!.generateContent(content);
      
      String responseText = response.text ?? 
          'Mi querido hermano en Cristo, no pude procesar tu mensaje en este momento. Pero recuerda que Dios siempre escucha tu coraz√≥n. üôè‚ú®';
      
      // Limpiar y validar la respuesta
      responseText = _cleanResponse(responseText);
      
      // Usar el factory method MessageModel.ai()
      return MessageModel.ai(
        responseText,
        verseRef: _extractVerseReference(responseText),
      );
      
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå Error en getChatResponse: $e');
      }
      
      // Respuesta de fallback con mensaje reconfortante
      return MessageModel.ai(
        'Mi querido hermano en Cristo, estoy experimentando dificultades t√©cnicas en este momento. Por favor, intenta nuevamente. Mientras tanto, recuerda que Dios siempre est√° contigo y te ama inmensamente. Como dice el Salmo 46:1: "Dios es nuestro amparo y fortaleza, nuestro pronto auxilio en las tribulaciones." üôè‚ú®‚ù§Ô∏è'
      );
    }
  }
  
  // M√âTODO ADICIONAL: Explicaci√≥n profunda de vers√≠culos b√≠blicos
  Future<MessageModel> explainVerse(String verseText, String reference) async {
    if (_model == null) _initialize();
    
    try {
      final prompt = '''
Como Hermana Esperanza, explica este vers√≠culo b√≠blico con sabidur√≠a maternal y profundidad espiritual:

"$verseText" - $reference

Proporciona una explicaci√≥n que incluya:
1. Contexto hist√≥rico y cultural breve pero relevante
2. Significado teol√≥gico y espiritual profundo
3. Aplicaci√≥n pr√°ctica para la vida cristiana de hoy
4. Mensaje de esperanza y aliento personal
5. Conexi√≥n con otros pasajes b√≠blicos si es apropiado
6. M√°ximo 180 palabras para mantener claridad

Responde con el amor y la sabidur√≠a de una consejera espiritual experimentada:
      ''';
      
      final content = [Content.text(prompt)];
      final response = await _model!.generateContent(content);
      
      String explanation = response.text ?? 
          'Este vers√≠culo es una bendici√≥n especial de Dios para tu vida. Te invito a meditar en √©l con oraci√≥n y a permitir que su verdad transforme tu coraz√≥n. üôèüìñ‚ú®';
      
      explanation = _cleanResponse(explanation);
      
      return MessageModel.ai(
        explanation,
        verseRef: reference,
        verseText: verseText,
      );
      
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå Error explicando vers√≠culo: $e');
      }
      return MessageModel.ai(
        'La Palabra de Dios siempre trae luz, esperanza y sabidur√≠a a nuestros corazones. Este vers√≠culo ($reference) es un regalo divino para tu vida espiritual. Te animo a leerlo en oraci√≥n y permitir que el Esp√≠ritu Santo te revele su significado profundo. üìñ‚ú®üôè'
      );
    }
  }
  
  // M√âTODO ADICIONAL: Oraci√≥n personalizada
  Future<MessageModel> generatePrayer(String intention, String prayerType) async {
    if (_model == null) _initialize();
    
    try {
      final prompt = '''
Como Hermana Esperanza, crea una oraci√≥n cat√≥lica hermosa y personalizada:

Tipo de oraci√≥n: $prayerType
Intenci√≥n espec√≠fica: $intention

Crea una oraci√≥n que sea:
1. Aut√©nticamente cat√≥lica y b√≠blicamente fundamentada
2. C√°lida, personal y significativa
3. Apropiada para la intenci√≥n expresada
4. Con estructura clara (invocaci√≥n, petici√≥n, agradecimiento)
5. M√°ximo 150 palabras
6. Que inspire confianza en Dios

Oraci√≥n maternal de Hermana Esperanza:
      ''';
      
      final content = [Content.text(prompt)];
      final response = await _model!.generateContent(content);
      
      String prayer = response.text ?? 
          'Padre celestial, en tu infinita misericordia, escucha nuestros corazones. Te confiamos esta intenci√≥n especial y te pedimos que tu voluntad se cumpla en nuestras vidas. Por Cristo nuestro Se√±or. Am√©n. üôè‚ú®';
      
      prayer = _cleanResponse(prayer);
      
      return MessageModel.ai(
        'üôè **Oraci√≥n para ti:**\n\n$prayer\n\n*Que esta oraci√≥n lleve paz a tu coraz√≥n y te acerque m√°s a Dios.* ‚ú®',
        verseRef: 'Mateo 7:7'
      );
      
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå Error generando oraci√≥n: $e');
      }
      return MessageModel.ai(
        'üôè **Oraci√≥n desde el coraz√≥n:**\n\nPadre celestial, te confiamos esta intenci√≥n especial que llevamos en el coraz√≥n. Sabemos que t√∫ conoces nuestras necesidades antes de que te las pidamos. Te pedimos tu bendici√≥n, tu gu√≠a y tu paz. Que se haga tu voluntad en nuestras vidas. Por Jesucristo nuestro Se√±or. Am√©n. ‚ú®üïäÔ∏è'
      );
    }
  }
  
  // M√âTODOS PRIVADOS DE UTILIDAD
  
  String _cleanResponse(String response) {
    // Limpiar la respuesta de caracteres extra√±os o formato inadecuado
    response = response.trim();
    
    // Remover posibles prefijos no deseados
    final prefixesToRemove = [
      'Hermana Esperanza:',
      'Respuesta:',
      'Como Hermana Esperanza:',
    ];
    
    for (String prefix in prefixesToRemove) {
      if (response.startsWith(prefix)) {
        response = response.substring(prefix.length).trim();
      }
    }
    
    // Validar que la respuesta no est√© vac√≠a
    if (response.isEmpty) {
      response = 'La paz de Dios est√© contigo. Por favor, comparte conmigo lo que hay en tu coraz√≥n. üôè‚ù§Ô∏è';
    }
    
    return response;
  }
  
  String? _extractVerseReference(String text) {
    // Expresi√≥n regular para encontrar referencias b√≠blicas comunes
    final RegExp versePattern = RegExp(
      r'\b(\d?\s*[A-Za-z]+)\s+(\d+):(\d+)(?:-(\d+))?\b',
      caseSensitive: false
    );
    
    final Match? match = versePattern.firstMatch(text);
    if (match != null) {
      return match.group(0); // Retorna la referencia completa encontrada
    }
    
    return null;
  }
  
  // M√âTODO PARA VALIDAR EL ESTADO DE LA API
  bool isModelReady() {
    return _model != null;
  }
  
  // M√âTODO PARA REINICIALIZAR EN CASO DE ERROR PERSISTENTE
  void reinitialize() {
    _model = null;
    _initialize();
  }
  
  // M√âTODO PARA OBTENER INFORMACI√ìN DEL ESTADO
  Map<String, dynamic> getServiceStatus() {
    return {
      'modelReady': _model != null,
      'modelName': 'gemini-pro',
      'lastInitialized': DateTime.now().toIso8601String(),
      'capabilities': [
        'Chat responses',
        'Verse explanations', 
        'Prayer generation',
        'Spiritual advice'
      ]
    };
  }
}
